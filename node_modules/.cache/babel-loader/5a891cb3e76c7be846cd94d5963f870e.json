{"ast":null,"code":"export const Covid = {\n  handleCSVResult(csvString) {\n    // Split csv to rows array\n    var rows = csvString.split('\\n'); //console.log(rows);\n\n    let newRows = rows.map(element => element.split(\",\"));\n    let dateArr = newRows.map(element => element[0]);\n    dateArr.shift();\n    let casesArr = newRows.map(element => element[1]);\n    casesArr.shift();\n    let deathsArr = newRows.map(element => element[2]);\n    deathsArr.shift();\n    newRows = [dateArr, casesArr, deathsArr];\n    console.log(`US cases: `, newRows);\n    return newRows;\n  },\n\n  handleStateCSVResult(csvString, fips) {\n    // Split csv to rows array\n    var rows = csvString.split('\\n'); //console.log(rows);\n\n    let newRows = rows.map(element => element.split(\",\"));\n    console.log(newRows);\n    console.log(fips);\n    let selectedState = [];\n\n    for (let i = 1; i < newRows.length; i++) {\n      //console.log(newRows[i][2])\n      // eslint-disable-next-line\n      if (newRows[i][2] == fips) {\n        selectedState.push(newRows[i]);\n      }\n    }\n\n    console.log(selectedState);\n    let dateArr = selectedState.map(element => element[0]); //console.log(dateArr);\n\n    let casesArr = selectedState.map(element => element[3]); //create array of new cases found each day\n\n    let newCases = [];\n\n    for (let i = 1; i < casesArr.length; i++) {\n      let element;\n      element = casesArr[i] - casesArr[i - 1];\n      newCases.push(element);\n    }\n\n    let deathsArr = selectedState.map(element => element[4]);\n    let stateName = selectedState[1][1];\n    console.log(stateName);\n    selectedState = [dateArr, casesArr, deathsArr, stateName];\n    return selectedState;\n  },\n\n  handleStatesToggle(csvString, fips) {}\n\n};\n/*\nlet Alabama=[];\nlet Alaska=[];\nlet Arizona=[];\nlet Arkansas=[];\nlet California=[];\nlet Colorado=[];\nlet Connecticut=[];\nlet Delaware=[];\nlet DC=[];\nlet Florida=[];\nlet Georgia=[];\nlet Hawaii=[];\nlet Idaho=[];\nlet Kansas=[];\nlet Kentucky=[];\nlet Louisiana=[];\nlet Maine=[];\nlet Maryland=[];\nlet Massachusetts=[];\nlet Michigan=[];\nlet Minnesota=[];\nlet Mississippi=[];\nlet Missouri=[];\nlet Montana=[];\nlet Nebraska=[];\nlet Nevada=[];\nlet NewHampshire=[];\nlet NewJersey=[];\nlet NewMexico=[];\nlet NewYork=[];\nlet NorthCarolina=[];\nlet NorthDakota=[];\nlet Ohio=[];\nlet Oklahoma=[];\nlet Oregon=[];\nlet Pennsylvania=[];\nlet RhodeIsland=[];\nlet SouthCarolina=[];\nlet SouthDakota=[];\nlet Tennessee=[];\nlet Texas=[];\nlet Utah=[];\nlet Vermont=[];\nlet Virginia=[];\nlet Washington=[];\nlet WestVirginia=[];\nlet Wisconsin=[];\nlet Wyoming=[];\nlet AmericanSamoa=[];\nlet Micronesia=[];\nlet Guam=[];\nlet Mariana=[];\nlet Palau=[];\nlet PuertoRico=[];\nlet VirginIslands=[];\n*/","map":{"version":3,"sources":["/Users/christinealbert/Coding/covid-19-app/src/Data/data.js"],"names":["Covid","handleCSVResult","csvString","rows","split","newRows","map","element","dateArr","shift","casesArr","deathsArr","console","log","handleStateCSVResult","fips","selectedState","i","length","push","newCases","stateName","handleStatesToggle"],"mappings":"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","sourcesContent":["export const Covid = {\n  handleCSVResult(csvString) {\n    // Split csv to rows array\n    var rows = csvString.split('\\n');\n    //console.log(rows);\n    let newRows = rows.map(element => element.split(\",\"));\n    let dateArr = newRows.map(element => element[0]);\n    dateArr.shift();\n    let casesArr = newRows.map(element => element[1]);\n    casesArr.shift();\n    let deathsArr = newRows.map(element => element[2]);\n    deathsArr.shift();\n    newRows = [dateArr, casesArr, deathsArr];\n    console.log(`US cases: `, newRows);\n    return newRows;\n  },\n\n  handleStateCSVResult(csvString, fips) {\n    // Split csv to rows array\n    var rows = csvString.split('\\n');\n    //console.log(rows);\n    let newRows = rows.map(element => element.split(\",\"));\n    console.log(newRows);\n    console.log(fips);\n    let selectedState = [];\n    for (let i = 1; i < newRows.length; i++) {\n      //console.log(newRows[i][2])\n      // eslint-disable-next-line\n      if (newRows[i][2] == fips) {\n        selectedState.push(newRows[i]);\n      }\n    }\n    console.log(selectedState);\n    let dateArr = selectedState.map(element => element[0]);\n    //console.log(dateArr);\n    let casesArr = selectedState.map(element => element[3]);\n    \n    //create array of new cases found each day\n    let newCases = [];\n    for (let i = 1; i< casesArr.length; i++) {\n      let element;\n      element = casesArr[i] - casesArr[i-1];\n      newCases.push(element);\n    }\n    let deathsArr = selectedState.map(element => element[4]);\n    let stateName = selectedState[1][1];\n    console.log(stateName);\n    selectedState = [dateArr, casesArr, deathsArr, stateName];\n    return selectedState;\n  },\n\n  handleStatesToggle(csvString, fips) {\n    \n  }\n}\n\n\n\n\n/*\nlet Alabama=[];\nlet Alaska=[];\nlet Arizona=[];\nlet Arkansas=[];\nlet California=[];\nlet Colorado=[];\nlet Connecticut=[];\nlet Delaware=[];\nlet DC=[];\nlet Florida=[];\nlet Georgia=[];\nlet Hawaii=[];\nlet Idaho=[];\nlet Kansas=[];\nlet Kentucky=[];\nlet Louisiana=[];\nlet Maine=[];\nlet Maryland=[];\nlet Massachusetts=[];\nlet Michigan=[];\nlet Minnesota=[];\nlet Mississippi=[];\nlet Missouri=[];\nlet Montana=[];\nlet Nebraska=[];\nlet Nevada=[];\nlet NewHampshire=[];\nlet NewJersey=[];\nlet NewMexico=[];\nlet NewYork=[];\nlet NorthCarolina=[];\nlet NorthDakota=[];\nlet Ohio=[];\nlet Oklahoma=[];\nlet Oregon=[];\nlet Pennsylvania=[];\nlet RhodeIsland=[];\nlet SouthCarolina=[];\nlet SouthDakota=[];\nlet Tennessee=[];\nlet Texas=[];\nlet Utah=[];\nlet Vermont=[];\nlet Virginia=[];\nlet Washington=[];\nlet WestVirginia=[];\nlet Wisconsin=[];\nlet Wyoming=[];\nlet AmericanSamoa=[];\nlet Micronesia=[];\nlet Guam=[];\nlet Mariana=[];\nlet Palau=[];\nlet PuertoRico=[];\nlet VirginIslands=[];\n*/\n"]},"metadata":{},"sourceType":"module"}