{"ast":null,"code":"var _jsxFileName = \"/Users/christinealbert/Coding/covid-19-app/src/components/App.js\";\nimport React from 'react'; // eslint-disable-next-line\n\nimport { Covid } from '../Data/data';\nimport { GetData } from '../Data/GetData'; // eslint-disable-next-line\n\nimport classes from './App.module.css'; //import Dashboard from './Dashboard/Dashboard';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      washington: []\n    };\n  }\n\n  componentDidMount() {\n    GetData.handleRequest().then(response => {\n      this.setState({\n        washington: {\n          dates: response\n        }\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      id: \"csv-data\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, null));\n  }\n\n}\n\nexport default App;\n/*\n <Dashboard \n    cases=\n/>\n\n*/\n\n/*\n  function handleCSVResult(csvString) {\n  // Get the div element to append the data to\n  var dataArea = document.getElementById('csv-data');\n  \n  // Split csv to rows array\n  var rows = csvString.split('\\n');\n  //console.log(rows);\n  let newRows = rows.map(element => element.split(\",\"));\n  console.log(newRows);\n  let washington = [];\n  for (let i = 1; i < newRows.length; i++) {\n    if (newRows[i][1] === \"Washington\") {\n      washington.push(newRows[i]);\n    }\n    //washington = newRows.filter(element => element[i][1] === \"Washington\");\n  }\n  //rows.filter(row => row[1] === \"Washington\");\n  \n  console.log(washington);\n  var htmlStr = '';\n  \n  // Iterate over each row\n  for (var i = 0; i < rows.length; i++) {\n    var row = rows[i];\n    \n    //console.log(row);\n    // split row to cells\n    var cells = row.split(',');\n    \n    // Extract data from cells of current row\n    var date = cells[0];\n    var state = cells[1];\n    // eslint-disable-next-line\n    var fips = cells[2];\n    var cases = cells[3];\n    var deaths = cells[4];\n    \n    // Add extracted CSV data to string\n    htmlStr += `<p>Date: ${date}, state: ${state}, cases: ${cases}, deaths: ${deaths}</p><br>`;\n  }\n  \n  //console.log(htmlStr);\n  // Set the string generated from CSV as HTML of the dedicated div\n  dataArea.innerHTML = htmlStr;\n}\n*/","map":{"version":3,"sources":["/Users/christinealbert/Coding/covid-19-app/src/components/App.js"],"names":["React","Covid","GetData","classes","App","Component","constructor","props","state","washington","componentDidMount","handleRequest","then","response","setState","dates","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,SAASC,KAAT,QAAsB,cAAtB;AACA,SAASC,OAAT,QAAwB,iBAAxB,C,CACA;;AACA,OAAOC,OAAP,MAAoB,kBAApB,C,CAGA;;AAGA,MAAMC,GAAN,SAAkBJ,KAAK,CAACK,SAAxB,CAAkC;AAChCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,UAAU,EAAE;AADD,KAAb;AAGD;;AAEHC,EAAAA,iBAAiB,GAAG;AAClBR,IAAAA,OAAO,CAACS,aAAR,GAAwBC,IAAxB,CAA6BC,QAAQ,IAAI;AACvC,WAAKC,QAAL,CAAc;AACZL,QAAAA,UAAU,EAAE;AACVM,UAAAA,KAAK,EAAEF;AADG;AADA,OAAd;AAKD,KAND;AAOD;;AAECG,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAqB,MAAA,EAAE,EAAC,UAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,yCADF,CADF;AAOD;;AA1B+B;;AA8BlC,eAAeZ,GAAf;AACA;;;;;;;AAOA","sourcesContent":["import React from 'react';\n// eslint-disable-next-line\nimport { Covid } from '../Data/data';\nimport { GetData } from '../Data/GetData';\n// eslint-disable-next-line\nimport classes from './App.module.css';\n\n\n//import Dashboard from './Dashboard/Dashboard';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      washington: [] \n    }\n  }\n\ncomponentDidMount() {\n  GetData.handleRequest().then(response => {\n    this.setState({\n      washington: {\n        dates: response\n      }\n    });\n  });\n}\n  \n  render() {\n    return (\n      <div className=\"App\" id=\"csv-data\">\n        <>\n        \n        </>\n      </div>\n    );\n  }\n  \n\n}\nexport default App;\n/*\n <Dashboard \n    cases=\n/>\n\n*/\n\n/*\n  function handleCSVResult(csvString) {\n  // Get the div element to append the data to\n  var dataArea = document.getElementById('csv-data');\n  \n  // Split csv to rows array\n  var rows = csvString.split('\\n');\n  //console.log(rows);\n  let newRows = rows.map(element => element.split(\",\"));\n  console.log(newRows);\n  let washington = [];\n  for (let i = 1; i < newRows.length; i++) {\n    if (newRows[i][1] === \"Washington\") {\n      washington.push(newRows[i]);\n    }\n    //washington = newRows.filter(element => element[i][1] === \"Washington\");\n  }\n  //rows.filter(row => row[1] === \"Washington\");\n  \n  console.log(washington);\n  var htmlStr = '';\n  \n  // Iterate over each row\n  for (var i = 0; i < rows.length; i++) {\n    var row = rows[i];\n    \n    //console.log(row);\n    // split row to cells\n    var cells = row.split(',');\n    \n    // Extract data from cells of current row\n    var date = cells[0];\n    var state = cells[1];\n    // eslint-disable-next-line\n    var fips = cells[2];\n    var cases = cells[3];\n    var deaths = cells[4];\n    \n    // Add extracted CSV data to string\n    htmlStr += `<p>Date: ${date}, state: ${state}, cases: ${cases}, deaths: ${deaths}</p><br>`;\n  }\n  \n  //console.log(htmlStr);\n  // Set the string generated from CSV as HTML of the dedicated div\n  dataArea.innerHTML = htmlStr;\n}\n*/"]},"metadata":{},"sourceType":"module"}