{"ast":null,"code":"const moment = require('moment');\n\nexport const Covid = {\n  /*\n  handleDates(dates, number) {\n    let dateObjArr = dates.map(element => new Date(element));\n    dateObjArr = dateObjArr.map(element => element.setDate(element.getDate() + number));\n    dateObjArr = dateObjArr.map(element => new Date(element));\n    dateObjArr = dateObjArr.map(element => element.toDateString());\n    return dates;\n  },\n  */\n  handleUSCSVResult(csvString) {\n    // Split csv to rows array\n    var rows = csvString.split('\\n');\n    let newRows = rows.map(element => element.split(\",\"));\n    let dateArr = newRows.map(element => element[0]);\n    dateArr.shift();\n    dateArr = dateArr.map(element => moment(element).format(\"M-D-YYYY\"));\n    let casesArr = newRows.map(element => element[1]);\n    casesArr.shift();\n    let deathsArr = newRows.map(element => element[2]);\n    deathsArr.shift();\n    newRows = [dateArr, casesArr, deathsArr];\n    console.log(`US cases: `, newRows);\n    return newRows;\n  },\n\n  handleUSTotalPerCapita(csvString) {\n    let results = this.handleUSCSVResult(csvString);\n    let cases = [];\n\n    for (let i = 1; i < results[1].length; i++) {\n      let element;\n      element = Math.ceil(100000 * results[1][i] / 328239523);\n      cases.push(element);\n    }\n\n    console.log(`cases per 100,000 people: `, cases);\n    let deaths = [];\n\n    for (let i = 1; i < results[2].length; i++) {\n      let element;\n      element = Math.ceil(1000 * results[1][i] / 328239523);\n      deaths.push(element);\n    }\n\n    console.log(`deaths per 100,000 people: `, deaths);\n    let perCapitaResults = [results[0], cases, deaths];\n    console.log(`perCapitaResults: `, perCapitaResults);\n    return perCapitaResults;\n  },\n\n  handleUSNewPerCapita(csvString) {\n    let results = this.handleUSTotalPerCapita(csvString);\n    let newCases = [];\n\n    for (let i = 1; i < results[1].length; i++) {\n      let element;\n      element = results[1][i] - results[1][i - 1];\n      newCases.push(element);\n    }\n\n    console.log(`new cases per capita: `, newCases);\n    let newDeaths = [];\n\n    for (let i = 1; i < results[2].length; i++) {\n      let element;\n      element = results[2][i] - results[2][i - 1];\n      newDeaths.push(element);\n    }\n\n    console.log(`new deaths per capita: `, newDeaths);\n    let newResults = [results[0], newCases, newDeaths];\n    console.log(`newResults per capita: `, newResults);\n    return newResults;\n  },\n\n  handleUSNewCases(csvString) {\n    let results = this.handleUSCSVResult(csvString);\n    console.log(`results[0]: `, results[0]);\n    let newCases = [];\n    let dateArr = results[0].map(element => {\n      moment(element).add(1, 'd'); //moment(element).format(\"M D, YYYY\");\n    });\n    console.log(`dateArr: `, dateArr);\n\n    for (let i = 1; i < results[1].length; i++) {\n      let element;\n      element = results[1][i] - results[1][i - 1];\n      newCases.push(element);\n    }\n\n    console.log(`new cases: `, newCases);\n    let newDeaths = [];\n\n    for (let i = 1; i < results[2].length; i++) {\n      let element;\n      element = results[2][i] - results[2][i - 1];\n      newDeaths.push(element);\n    }\n\n    console.log(`new deaths: `, newDeaths);\n    let newResults = [dateArr, newCases, newDeaths];\n    console.log(`newResults: `, newResults);\n    return newResults;\n  },\n\n  handleStatesCSVResult(csvString, fips) {\n    // Split csv to rows array\n    var rows = csvString.split('\\n');\n    let newRows = rows.map(element => element.split(\",\"));\n    let selectedState = [];\n\n    for (let i = 1; i < newRows.length; i++) {\n      // eslint-disable-next-line\n      if (newRows[i][2] == fips) {\n        selectedState.push(newRows[i]);\n      }\n    }\n\n    let dateArr = selectedState.map(element => element[0]);\n    dateArr.map(element => element.toDateString());\n    let casesArr = selectedState.map(element => element[3]);\n    let deathsArr = selectedState.map(element => element[4]);\n    let stateName = selectedState[1][1];\n    selectedState = [dateArr, casesArr, deathsArr, stateName];\n    return selectedState;\n  },\n\n  handleStatesNewCases(csvString, fips) {\n    let selectedState = this.handleStatesCSVResult(csvString, fips); //create array of new cases found each day\n\n    let newCases = [];\n\n    for (let i = 1; i < selectedState[1].length; i++) {\n      let element;\n      element = selectedState[1][i] - selectedState[1][i - 1];\n      newCases.push(element);\n    }\n\n    console.log(`new cases: `, newCases);\n    let newDeaths = [];\n\n    for (let i = 1; i < selectedState[2].length; i++) {\n      let element;\n      element = selectedState[2][i] - selectedState[2][i - 1];\n      newDeaths.push(element);\n    }\n\n    console.log(`new deaths: `, newDeaths);\n    let newResults = [selectedState[0], newCases, newDeaths, selectedState[3]];\n    console.log(`newResults: `, newResults);\n    return newResults;\n  },\n\n  handleStatesTotalPerCapita(csvString, fips) {\n    let results = this.handleStatesCSVResult(csvString, fips);\n    let stateName = results[3];\n    let population;\n    let cases = []; // eslint-disable-next-line\n\n    switch (fips) {\n      case 1:\n        population = 4903185;\n        break;\n\n      case 2:\n        population = 731545;\n        break;\n\n      case 4:\n        population = 7278717;\n        break;\n\n      case 5:\n        population = 3017804;\n        break;\n\n      case 6:\n        population = 39512223;\n        break;\n\n      case 8:\n        population = 5758736;\n        break;\n\n      case 9:\n        population = 3565287;\n        break;\n\n      case 10:\n        population = 973764;\n        break;\n\n      case 11:\n        population = 705749;\n        break;\n\n      case 12:\n        population = 21477737;\n        break;\n\n      case 13:\n        population = 10617423;\n        break;\n\n      case 15:\n        population = 1415872;\n        break;\n\n      case 16:\n        population = 1787065;\n        break;\n\n      case 17:\n        population = 12671821;\n        break;\n\n      case 18:\n        population = 6732219;\n        break;\n\n      case 19:\n        population = 3155070;\n        break;\n\n      case 20:\n        population = 2913314;\n        break;\n\n      case 21:\n        population = 4467673;\n        break;\n\n      case 22:\n        population = 4648794;\n        break;\n\n      case 23:\n        population = 1344212;\n        break;\n\n      case 24:\n        population = 6045680;\n        break;\n\n      case 25:\n        population = 6892503;\n        break;\n\n      case 26:\n        population = 9986857;\n        break;\n\n      case 27:\n        population = 5639632;\n        break;\n\n      case 28:\n        population = 2976149;\n        break;\n\n      case 29:\n        population = 6137428;\n        break;\n\n      case 30:\n        population = 1068778;\n        break;\n\n      case 31:\n        population = 1934408;\n        break;\n\n      case 32:\n        population = 3080156;\n        break;\n\n      case 33:\n        population = 1359711;\n        break;\n\n      case 34:\n        population = 8882190;\n        break;\n\n      case 35:\n        population = 2096829;\n        break;\n\n      case 36:\n        population = 19453561;\n        break;\n\n      case 37:\n        population = 10488084;\n        break;\n\n      case 38:\n        population = 762062;\n        break;\n\n      case 39:\n        population = 11689100;\n        break;\n\n      case 40:\n        population = 3956971;\n        break;\n\n      case 41:\n        population = 4217737;\n        break;\n\n      case 42:\n        population = 12801989;\n        break;\n\n      case 44:\n        population = 1059361;\n        break;\n\n      case 45:\n        population = 5148714;\n        break;\n\n      case 46:\n        population = 884659;\n        break;\n\n      case 47:\n        population = 6829174;\n        break;\n\n      case 48:\n        population = 28995881;\n        break;\n\n      case 49:\n        population = 3205958;\n        break;\n\n      case 50:\n        population = 623989;\n        break;\n\n      case 51:\n        population = 8535519;\n        break;\n\n      case 53:\n        population = 7614893;\n        break;\n\n      case 54:\n        population = 1792147;\n        break;\n\n      case 55:\n        population = 5822434;\n        break;\n\n      case 56:\n        population = 578759;\n        break;\n\n      case 60:\n        population = 55465;\n        break;\n\n      case 66:\n        population = 165768;\n        break;\n\n      case 69:\n        population = 56882;\n        break;\n\n      case 72:\n        population = 3193694;\n        break;\n\n      case 78:\n        population = 106977;\n        break;\n    }\n\n    for (let i = 1; i < results[1].length; i++) {\n      let element;\n      element = Math.ceil(100000 * results[1][i] / population);\n      cases.push(element);\n    }\n\n    console.log(`cases per 100,000 people: `, cases);\n    let deaths = [];\n\n    for (let i = 1; i < results[2].length; i++) {\n      let element;\n      element = Math.ceil(1000 * results[1][i] / population);\n      deaths.push(element);\n    }\n\n    console.log(`deaths per 100,000 people: `, deaths);\n    let perCapitaResults = [results[0], cases, deaths, stateName];\n    console.log(`perCapitaResults: `, perCapitaResults);\n    return perCapitaResults;\n  },\n\n  handleStatesNewPerCapita(csvString, fips) {\n    let results = this.handleStatesTotalPerCapita(csvString, fips);\n    let stateName = results[3];\n    let newCases = [];\n\n    for (let i = 1; i < results[1].length; i++) {\n      let element;\n      element = results[1][i] - results[1][i - 1];\n      newCases.push(element);\n    }\n\n    console.log(`new cases per capita: `, newCases);\n    let newDeaths = [];\n\n    for (let i = 1; i < results[2].length; i++) {\n      let element;\n      element = results[2][i] - results[2][i - 1];\n      newDeaths.push(element);\n    }\n\n    console.log(`new deaths per capita: `, newDeaths);\n    let newResults = [results[0], newCases, newDeaths, stateName];\n    console.log(`newResults per capita: `, newResults);\n    return newResults;\n  }\n\n};","map":{"version":3,"sources":["/Users/christinealbert/Coding/covid-19-app/src/Data/data.js"],"names":["moment","require","Covid","handleUSCSVResult","csvString","rows","split","newRows","map","element","dateArr","shift","format","casesArr","deathsArr","console","log","handleUSTotalPerCapita","results","cases","i","length","Math","ceil","push","deaths","perCapitaResults","handleUSNewPerCapita","newCases","newDeaths","newResults","handleUSNewCases","add","handleStatesCSVResult","fips","selectedState","toDateString","stateName","handleStatesNewCases","handleStatesTotalPerCapita","population","handleStatesNewPerCapita"],"mappings":"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","sourcesContent":["const moment = require('moment');\n\nexport const Covid = {\n  /*\n  handleDates(dates, number) {\n    let dateObjArr = dates.map(element => new Date(element));\n    dateObjArr = dateObjArr.map(element => element.setDate(element.getDate() + number));\n    dateObjArr = dateObjArr.map(element => new Date(element));\n    dateObjArr = dateObjArr.map(element => element.toDateString());\n    return dates;\n  },\n  */\n  handleUSCSVResult(csvString) {\n    // Split csv to rows array\n    var rows = csvString.split('\\n');\n    let newRows = rows.map(element => element.split(\",\"));\n    let dateArr = newRows.map(element => element[0]);\n    dateArr.shift();\n    dateArr = dateArr.map(element => moment(element).format(\"M-D-YYYY\"));\n    let casesArr = newRows.map(element => element[1]);\n    casesArr.shift();\n    let deathsArr = newRows.map(element => element[2]);\n    deathsArr.shift();\n    newRows = [dateArr, casesArr, deathsArr];\n    console.log(`US cases: `, newRows);\n    return newRows;\n  },\n\n  handleUSTotalPerCapita(csvString) {\n    let results = this.handleUSCSVResult(csvString);\n    let cases = [];\n    for (let i = 1; i < results[1].length; i++) {\n      let element;\n      element = Math.ceil((100000 * results[1][i])/328239523);\n      cases.push(element);\n    }\n    console.log(`cases per 100,000 people: `, cases);\n    let deaths = [];\n    for (let i = 1; i < results[2].length; i++) {\n      let element;\n      element = Math.ceil((1000 * results[1][i])/328239523);\n      deaths.push(element);\n    }\n    console.log(`deaths per 100,000 people: `, deaths);\n    let perCapitaResults = [results[0], cases, deaths];\n    console.log(`perCapitaResults: `, perCapitaResults);\n    return perCapitaResults;\n  },\n\n  handleUSNewPerCapita(csvString) {\n    let results = this.handleUSTotalPerCapita(csvString);\n    let newCases = [];\n    for (let i = 1; i < results[1].length; i++) {\n      let element;\n      element = results[1][i] - results[1][i-1];\n      newCases.push(element);\n    }\n    console.log(`new cases per capita: `, newCases);\n    let newDeaths = [];\n    for (let i = 1; i < results[2].length; i++) {\n      let element;\n      element = results[2][i] - results[2][i-1];\n      newDeaths.push(element);\n    }\n    console.log(`new deaths per capita: `, newDeaths);\n    let newResults = [results[0], newCases, newDeaths]\n    console.log(`newResults per capita: `, newResults);\n    return newResults;\n  },\n\n  handleUSNewCases(csvString) {\n    let results = this.handleUSCSVResult(csvString);\n    console.log(`results[0]: `, results[0]);\n    let newCases = [];\n    let dateArr = results[0].map(element => {\n      moment(element).add(1, 'd');\n      //moment(element).format(\"M D, YYYY\");\n    });\n    console.log(`dateArr: `, dateArr);\n    for (let i = 1; i < results[1].length; i++) {\n      let element;\n      element = results[1][i] - results[1][i-1];\n      newCases.push(element);\n    }\n    console.log(`new cases: `, newCases);\n    let newDeaths = [];\n    for (let i = 1; i < results[2].length; i++) {\n      let element;\n      element = results[2][i] - results[2][i-1];\n      newDeaths.push(element);\n    }\n    console.log(`new deaths: `, newDeaths);\n    let newResults = [dateArr, newCases, newDeaths]\n    console.log(`newResults: `, newResults);\n    return newResults;\n  },\n\n  handleStatesCSVResult(csvString, fips) {\n    // Split csv to rows array\n    var rows = csvString.split('\\n');\n    let newRows = rows.map(element => element.split(\",\"));\n    let selectedState = [];\n    for (let i = 1; i < newRows.length; i++) {\n      // eslint-disable-next-line\n      if (newRows[i][2] == fips) {\n        selectedState.push(newRows[i]);\n      }\n    }\n    let dateArr = selectedState.map(element => element[0]);\n    dateArr.map(element => element.toDateString());\n    let casesArr = selectedState.map(element => element[3]);\n    let deathsArr = selectedState.map(element => element[4]);\n    let stateName = selectedState[1][1];\n    selectedState = [dateArr, casesArr, deathsArr, stateName];\n    return selectedState;\n  },\n\n  handleStatesNewCases(csvString, fips) {\n    let selectedState = this.handleStatesCSVResult(csvString, fips);\n    //create array of new cases found each day\n    let newCases = [];\n    for (let i = 1; i < selectedState[1].length; i++) {\n      let element;\n      element = selectedState[1][i] - selectedState[1][i-1];\n      newCases.push(element);\n    }\n    console.log(`new cases: `, newCases);\n    let newDeaths = [];\n    for (let i = 1; i < selectedState[2].length; i++) {\n      let element;\n      element = selectedState[2][i] - selectedState[2][i-1];\n      newDeaths.push(element);\n    }\n    console.log(`new deaths: `, newDeaths);\n    let newResults = [selectedState[0], newCases, newDeaths, selectedState[3]]\n    console.log(`newResults: `, newResults);\n    return newResults;\n  },\n\n  handleStatesTotalPerCapita(csvString, fips) {\n    let results = this.handleStatesCSVResult(csvString, fips);\n    let stateName = results[3];\n    let population;\n    let cases = [];\n    // eslint-disable-next-line\n    switch(fips) {\n      case 1:\n        population = 4903185;\n        break;\n      case 2:\n        population = 731545;\n        break;\n      case 4:\n        population = 7278717;\n        break;\n      case 5:\n        population = 3017804;\n        break;\n      case 6:\n        population = 39512223;\n        break;\n      case 8:\n        population = 5758736;\n        break;\n      case 9:\n        population = 3565287;\n        break;\n      case 10:\n        population = 973764;\n        break;\n      case 11:\n        population = 705749;\n        break;\n      case 12:\n        population = 21477737;\n        break;\n      case 13:\n        population = 10617423;\n        break;\n      case 15:\n        population = 1415872;\n        break;\n      case 16:\n        population = 1787065;\n        break;\n      case 17:\n        population = 12671821;\n        break;\n      case 18:\n        population = 6732219;\n        break;\n      case 19:\n        population = 3155070;\n        break;\n      case 20:\n        population = 2913314;\n        break;\n      case 21:\n        population = 4467673;\n        break;\n      case 22:\n        population = 4648794;\n        break;\n      case 23:\n        population = 1344212;\n        break;\n      case 24:\n        population = 6045680;\n        break;\n      case 25:\n        population = 6892503;\n        break;\n      case 26:\n        population = 9986857;\n        break;\n      case 27:\n        population = 5639632;\n        break;\n      case 28:\n        population = 2976149;\n        break;\n      case 29:\n        population = 6137428;\n        break;\n      case 30:\n        population = 1068778;\n        break;\n      case 31:\n        population = 1934408;\n        break;\n      case 32:\n        population = 3080156;\n        break;\n      case 33:\n        population = 1359711;\n        break;\n      case 34:\n        population = 8882190;\n        break;\n      case 35:\n        population = 2096829;\n        break;\n      case 36:\n        population = 19453561;\n        break;\n      case 37:\n        population = 10488084;\n        break;\n      case 38:\n        population = 762062;\n        break;\n      case 39:\n        population = 11689100;\n        break;\n      case 40:\n        population = 3956971;\n        break;\n      case 41:\n        population = 4217737;\n        break;\n      case 42:\n        population = 12801989;\n        break;\n      case 44:\n        population = 1059361;\n        break;\n      case 45:\n        population = 5148714;\n        break;\n      case 46:\n        population = 884659;\n        break;\n      case 47:\n        population = 6829174;\n        break;\n      case 48:\n        population = 28995881;\n        break;\n      case 49:\n        population = 3205958;\n        break;\n      case 50:\n        population = 623989;\n        break;\n      case 51:\n        population = 8535519;\n        break;\n      case 53:\n        population = 7614893;\n        break;\n      case 54:\n        population = 1792147;\n        break;\n      case 55:\n        population = 5822434;\n        break;\n      case 56:\n        population = 578759;\n        break;\n      case 60:\n        population = 55465;\n        break;\n      case 66:\n        population = 165768;\n        break;\n      case 69:\n        population = 56882;\n        break;\n      case 72:\n        population = 3193694;\n        break;\n      case 78:\n        population = 106977;\n        break;                             \n    }\n    for (let i = 1; i < results[1].length; i++) {\n      let element;\n      element = Math.ceil((100000 * results[1][i])/population);\n      cases.push(element);\n    }\n    console.log(`cases per 100,000 people: `, cases);\n    let deaths = [];\n    for (let i = 1; i < results[2].length; i++) {\n      let element;\n      element = Math.ceil((1000 * results[1][i])/population);\n      deaths.push(element);\n    }\n    console.log(`deaths per 100,000 people: `, deaths);\n    let perCapitaResults = [results[0], cases, deaths, stateName];\n    console.log(`perCapitaResults: `, perCapitaResults);\n    return perCapitaResults;\n  },\n\n  handleStatesNewPerCapita(csvString, fips) {\n    let results = this.handleStatesTotalPerCapita(csvString, fips);\n    let stateName = results[3];\n    let newCases = [];\n    for (let i = 1; i < results[1].length; i++) {\n      let element;\n      element = results[1][i] - results[1][i-1];\n      newCases.push(element);\n    }\n    console.log(`new cases per capita: `, newCases);\n    let newDeaths = [];\n    for (let i = 1; i < results[2].length; i++) {\n      let element;\n      element = results[2][i] - results[2][i-1];\n      newDeaths.push(element);\n    }\n    console.log(`new deaths per capita: `, newDeaths);\n    let newResults = [results[0], newCases, newDeaths, stateName];\n    console.log(`newResults per capita: `, newResults);\n    return newResults;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}