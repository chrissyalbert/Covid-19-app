{"ast":null,"code":"let Alabama = [];\nlet Alaska = [];\nlet Arizona = [];\nlet Arkansas = [];\nlet California = [];\nlet Colorado = [];\nlet Connecticut = [];\nlet Delaware = [];\nlet DC = [];\nlet Florida = [];\nlet Georgia = [];\nlet Hawaii = [];\nlet Idaho = [];\nlet Kansas = [];\nlet Kentucky = [];\nlet Louisiana = [];\nlet Maine = [];\nlet Maryland = [];\nlet Massachusetts = [];\nlet Michigan = [];\nlet Minnesota = [];\nlet Mississippi = [];\nlet Missouri = [];\nlet Montana = [];\nlet Nebraska = [];\nlet Nevada = [];\nlet NewHampshire = [];\nlet NewJersey = [];\nlet NewMexico = [];\nlet NewYork = [];\nlet NorthCarolina = [];\nlet NorthDakota = [];\nlet Ohio = [];\nlet Oklahoma = [];\nlet Oregon = [];\nlet Pennsylvania = [];\nlet RhodeIsland = [];\nlet SouthCarolina = [];\nlet SouthDakota = [];\nlet Tennessee = [];\nlet Texas = [];\nlet Utah = [];\nlet Vermont = [];\nlet Virginia = [];\nlet Washington = [];\nlet WestVirginia = [];\nlet Wisconsin = [];\nlet Wyoming = [];\nlet AmericanSamoa = [];\nlet Micronesia = [];\nlet Guam = [];\nlet Mariana = [];\nlet Palau = [];\nlet PuertoRico = [];\nlet VirginIslands = [];\nexport const Covid = {\n  handleCSVResult(csvString, fips) {\n    // Get the div element to append the data to\n    //var dataArea = document.getElementById('csv-data');\n    // Split csv to rows array\n    var rows = csvString.split('\\n'); //console.log(rows);\n\n    let newRows = rows.map(element => element.split(\",\"));\n    console.log(newRows);\n    let selectedState = [];\n\n    for (let i = 1; i < newRows.length; i++) {\n      if (newRows[i][1] === fips) {\n        washington.push(newRows[i]);\n      }\n    }\n\n    console.log(washington);\n    let dateArr = washington.map(element => element[0]); //console.log(dateArr);\n\n    let casesArr = washington.map(element => element[3]); //create array of new cases found each day\n\n    let newCases = [];\n\n    for (let i = 1; i < casesArr.length; i++) {\n      let element;\n      element = casesArr[i] - casesArr[i - 1];\n      newCases.push(element);\n    }\n\n    let deathsArr = washington.map(element => element[4]);\n    washington = [dateArr, casesArr, deathsArr]; //console.log(washTotal);\n\n    return washington;\n    /*\n    var htmlStr = '';\n    // Iterate over each row\n    for (var i = 0; i < rows.length; i++) {\n      var row = rows[i];\n      //console.log(row);\n      // split row to cells\n      var cells = row.split(',');\n      // Extract data from cells of current row\n      var date = cells[0];\n      var state = cells[1];\n      // eslint-disable-next-line\n      var fips = cells[2];\n      var cases = cells[3];\n      var deaths = cells[4];\n      // Add extracted CSV data to string\n      //htmlStr += `<p>Date: ${date}, state: ${state}, cases: ${cases}, deaths: ${deaths}</p><br>`;\n    }\n    //console.log(htmlStr);\n    // Set the string generated from CSV as HTML of the dedicated div\n    //dataArea.innerHTML = htmlStr;\n    */\n  }\n\n};","map":{"version":3,"sources":["/Users/christinealbert/Coding/covid-19-app/src/Data/data.js"],"names":["Alabama","Alaska","Arizona","Arkansas","California","Colorado","Connecticut","Delaware","DC","Florida","Georgia","Hawaii","Idaho","Kansas","Kentucky","Louisiana","Maine","Maryland","Massachusetts","Michigan","Minnesota","Mississippi","Missouri","Montana","Nebraska","Nevada","NewHampshire","NewJersey","NewMexico","NewYork","NorthCarolina","NorthDakota","Ohio","Oklahoma","Oregon","Pennsylvania","RhodeIsland","SouthCarolina","SouthDakota","Tennessee","Texas","Utah","Vermont","Virginia","Washington","WestVirginia","Wisconsin","Wyoming","AmericanSamoa","Micronesia","Guam","Mariana","Palau","PuertoRico","VirginIslands","Covid","handleCSVResult","csvString","fips","rows","split","newRows","map","element","console","log","selectedState","i","length","washington","push","dateArr","casesArr","newCases","deathsArr"],"mappings":"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","sourcesContent":["let Alabama=[];\nlet Alaska=[];\nlet Arizona=[];\nlet Arkansas=[];\nlet California=[];\nlet Colorado=[];\nlet Connecticut=[];\nlet Delaware=[];\nlet DC=[];\nlet Florida=[];\nlet Georgia=[];\nlet Hawaii=[];\nlet Idaho=[];\nlet Kansas=[];\nlet Kentucky=[];\nlet Louisiana=[];\nlet Maine=[];\nlet Maryland=[];\nlet Massachusetts=[];\nlet Michigan=[];\nlet Minnesota=[];\nlet Mississippi=[];\nlet Missouri=[];\nlet Montana=[];\nlet Nebraska=[];\nlet Nevada=[];\nlet NewHampshire=[];\nlet NewJersey=[];\nlet NewMexico=[];\nlet NewYork=[];\nlet NorthCarolina=[];\nlet NorthDakota=[];\nlet Ohio=[];\nlet Oklahoma=[];\nlet Oregon=[];\nlet Pennsylvania=[];\nlet RhodeIsland=[];\nlet SouthCarolina=[];\nlet SouthDakota=[];\nlet Tennessee=[];\nlet Texas=[];\nlet Utah=[];\nlet Vermont=[];\nlet Virginia=[];\nlet Washington=[];\nlet WestVirginia=[];\nlet Wisconsin=[];\nlet Wyoming=[];\nlet AmericanSamoa=[];\nlet Micronesia=[];\nlet Guam=[];\nlet Mariana=[];\nlet Palau=[];\nlet PuertoRico=[];\nlet VirginIslands=[];\n\nexport const Covid = {\n  handleCSVResult(csvString, fips) {\n    // Get the div element to append the data to\n    //var dataArea = document.getElementById('csv-data');\n    \n    // Split csv to rows array\n    var rows = csvString.split('\\n');\n    //console.log(rows);\n    let newRows = rows.map(element => element.split(\",\"));\n    console.log(newRows);\n    let selectedState = [];\n    for (let i = 1; i < newRows.length; i++) {\n      \n      if (newRows[i][1] === fips) {\n        washington.push(newRows[i]);\n      }\n    }\n    \n    console.log(washington);\n    let dateArr = washington.map(element => element[0]);\n    //console.log(dateArr);\n    let casesArr = washington.map(element => element[3]);\n    \n    //create array of new cases found each day\n    let newCases = [];\n    for (let i = 1; i< casesArr.length; i++) {\n      let element;\n      element = casesArr[i] - casesArr[i-1];\n      newCases.push(element);\n    }\n    let deathsArr = washington.map(element => element[4]);\n    washington = [dateArr, casesArr, deathsArr];\n    //console.log(washTotal);\n    return washington;\n    /*\n    var htmlStr = '';\n    // Iterate over each row\n    for (var i = 0; i < rows.length; i++) {\n      var row = rows[i];\n      //console.log(row);\n      // split row to cells\n      var cells = row.split(',');\n      // Extract data from cells of current row\n      var date = cells[0];\n      var state = cells[1];\n      // eslint-disable-next-line\n      var fips = cells[2];\n      var cases = cells[3];\n      var deaths = cells[4];\n      // Add extracted CSV data to string\n      //htmlStr += `<p>Date: ${date}, state: ${state}, cases: ${cases}, deaths: ${deaths}</p><br>`;\n    }\n    //console.log(htmlStr);\n    // Set the string generated from CSV as HTML of the dedicated div\n    //dataArea.innerHTML = htmlStr;\n    */\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}