{"ast":null,"code":"export const Covid = {\n  constructor() {\n    this.handleCSVResult = this.handleCSVResult.bind(this);\n    this.handleNewCases = this.handleNewCases.bind(this);\n    this.handleStateCSVResult = this.handleStateCSVResult.bind(this);\n  },\n\n  handleCSVResult: function (csvString) {\n    // Split csv to rows array\n    var rows = csvString.split('\\n');\n    let newRows = rows.map(element => element.split(\",\"));\n    let dateArr = newRows.map(element => element[0]);\n    dateArr.shift();\n    let casesArr = newRows.map(element => element[1]);\n    casesArr.shift();\n    let deathsArr = newRows.map(element => element[2]);\n    deathsArr.shift();\n    newRows = [dateArr, casesArr, deathsArr];\n    console.log(`US cases: `, newRows);\n    return newRows;\n  },\n  handleNewCases: function (csvString) {\n    let results = this.handleCSVResult(csvString);\n    let newCases = [];\n\n    for (let i = 1; i < results[1].length; i++) {\n      let element;\n      element = results[1][i] - results[1][i - 1];\n      newCases.push(element);\n    }\n\n    console.log(`new cases: `, newCases);\n    let newDeaths = [];\n\n    for (let i = 1; i < results[2].length; i++) {\n      let element;\n      element = results[2][i] - results[2][i - 1];\n      newDeaths.push(element);\n    }\n\n    console.log(`new deaths: `, newDeaths);\n    let newResults = [results[0], newCases, newDeaths];\n    console.log(`newResults: `, newResults);\n    return newResults;\n  },\n  handleUSPerCapita: function (results) {\n    let cases = [];\n\n    for (let i = 1; i < results[1].length; i++) {\n      let element;\n      element = Math.ceil(100000 * results[1][i] / 328239523);\n      cases.push(element);\n    }\n\n    console.log(`cases per 100,000 people: `, cases);\n    let deaths = [];\n\n    for (let i = 1; i < results[2].length; i++) {\n      let element;\n      element = Math.ceil(1000 * results[1][i] / 328239523);\n      deaths.push(element);\n    }\n\n    console.log(`deaths per 100,000 people: `, deaths);\n    let perCapitaResults = [results[0], cases, deaths];\n    console.log(`perCapitaResults: `, perCapitaResults);\n    return perCapitaResults;\n  },\n  handleTotalUSPerCapita: function (csvString) {\n    let results = this.handleCSVResult(csvString);\n    let perCapitaResults = this.handleUSPerCapita(results);\n    return perCapitaResults;\n  },\n  handleUSNewCasesPerCapita: function (csvString) {\n    let results = this.handleNewCases(csvString);\n    let perCapitaResults = this.handleUSPerCapita(results);\n    return perCapitaResults;\n  },\n  handleStateCSVResult: function (csvString, fips) {\n    // Split csv to rows array\n    var rows = csvString.split('\\n');\n    let newRows = rows.map(element => element.split(\",\"));\n    let selectedState = [];\n\n    for (let i = 1; i < newRows.length; i++) {\n      // eslint-disable-next-line\n      if (newRows[i][2] == fips) {\n        selectedState.push(newRows[i]);\n      }\n    }\n\n    let dateArr = selectedState.map(element => element[0]);\n    let casesArr = selectedState.map(element => element[3]);\n    let deathsArr = selectedState.map(element => element[4]);\n    let stateName = selectedState[1][1];\n    selectedState = [dateArr, casesArr, deathsArr, stateName];\n    return selectedState;\n  },\n  handleStatesToggle: function (csvString, fips) {\n    let selectedState = this.handleStateCSVResult(csvString, fips); //create array of new cases found each day\n\n    let newCases = [];\n\n    for (let i = 1; i < selectedState[1].length; i++) {\n      let element;\n      element = selectedState[1][i] - selectedState[1][i - 1];\n      newCases.push(element);\n    }\n\n    console.log(`new cases: `, newCases);\n    let newDeaths = [];\n\n    for (let i = 1; i < selectedState[2].length; i++) {\n      let element;\n      element = selectedState[2][i] - selectedState[2][i - 1];\n      newDeaths.push(element);\n    }\n\n    console.log(`new deaths: `, newDeaths);\n    let newResults = [selectedState[0], newCases, newDeaths, selectedState[3]];\n    console.log(`newResults: `, newResults);\n    return newResults;\n  }\n};\n/*\nlet Alabama=[];\nlet Alaska=[];\nlet Arizona=[];\nlet Arkansas=[];\nlet California=[];\nlet Colorado=[];\nlet Connecticut=[];\nlet Delaware=[];\nlet DC=[];\nlet Florida=[];\nlet Georgia=[];\nlet Hawaii=[];\nlet Idaho=[];\nlet Kansas=[];\nlet Kentucky=[];\nlet Louisiana=[];\nlet Maine=[];\nlet Maryland=[];\nlet Massachusetts=[];\nlet Michigan=[];\nlet Minnesota=[];\nlet Mississippi=[];\nlet Missouri=[];\nlet Montana=[];\nlet Nebraska=[];\nlet Nevada=[];\nlet NewHampshire=[];\nlet NewJersey=[];\nlet NewMexico=[];\nlet NewYork=[];\nlet NorthCarolina=[];\nlet NorthDakota=[];\nlet Ohio=[];\nlet Oklahoma=[];\nlet Oregon=[];\nlet Pennsylvania=[];\nlet RhodeIsland=[];\nlet SouthCarolina=[];\nlet SouthDakota=[];\nlet Tennessee=[];\nlet Texas=[];\nlet Utah=[];\nlet Vermont=[];\nlet Virginia=[];\nlet Washington=[];\nlet WestVirginia=[];\nlet Wisconsin=[];\nlet Wyoming=[];\nlet AmericanSamoa=[];\nlet Micronesia=[];\nlet Guam=[];\nlet Mariana=[];\nlet Palau=[];\nlet PuertoRico=[];\nlet VirginIslands=[];\n*/","map":{"version":3,"sources":["/Users/christinealbert/Coding/covid-19-app/src/Data/data.js"],"names":["Covid","constructor","handleCSVResult","bind","handleNewCases","handleStateCSVResult","csvString","rows","split","newRows","map","element","dateArr","shift","casesArr","deathsArr","console","log","results","newCases","i","length","push","newDeaths","newResults","handleUSPerCapita","cases","Math","ceil","deaths","perCapitaResults","handleTotalUSPerCapita","handleUSNewCasesPerCapita","fips","selectedState","stateName","handleStatesToggle"],"mappings":"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","sourcesContent":["export const Covid = {\n  constructor() {\n    this.handleCSVResult = this.handleCSVResult.bind(this);\n    this.handleNewCases = this.handleNewCases.bind(this);\n    this.handleStateCSVResult = this.handleStateCSVResult.bind(this);\n    \n\n  },\n  \n  handleCSVResult: function(csvString) {\n    // Split csv to rows array\n    var rows = csvString.split('\\n');\n    let newRows = rows.map(element => element.split(\",\"));\n    let dateArr = newRows.map(element => element[0]);\n    dateArr.shift();\n    let casesArr = newRows.map(element => element[1]);\n    casesArr.shift();\n    let deathsArr = newRows.map(element => element[2]);\n    deathsArr.shift();\n    newRows = [dateArr, casesArr, deathsArr];\n    console.log(`US cases: `, newRows);\n    return newRows;\n  },\n\n  handleNewCases: function(csvString) {\n    let results = this.handleCSVResult(csvString);\n    let newCases = [];\n    for (let i = 1; i < results[1].length; i++) {\n      let element;\n      element = results[1][i] - results[1][i-1];\n      newCases.push(element);\n    }\n    console.log(`new cases: `, newCases);\n    let newDeaths = [];\n    for (let i = 1; i < results[2].length; i++) {\n      let element;\n      element = results[2][i] - results[2][i-1];\n      newDeaths.push(element);\n    }\n    console.log(`new deaths: `, newDeaths);\n    let newResults = [results[0], newCases, newDeaths]\n    console.log(`newResults: `, newResults);\n    return newResults;\n  },\n\n  handleUSPerCapita: function(results) {\n    let cases = [];\n    for (let i = 1; i < results[1].length; i++) {\n      let element;\n      element = Math.ceil((100000 * results[1][i])/328239523);\n      cases.push(element);\n    }\n    console.log(`cases per 100,000 people: `, cases);\n    let deaths = [];\n    for (let i = 1; i < results[2].length; i++) {\n      let element;\n      element = Math.ceil((1000 * results[1][i])/328239523);\n      deaths.push(element);\n    }\n    console.log(`deaths per 100,000 people: `, deaths);\n    let perCapitaResults = [results[0], cases, deaths];\n    console.log(`perCapitaResults: `, perCapitaResults);\n    return perCapitaResults;\n  },\n\n  handleTotalUSPerCapita: function(csvString) {\n    let results = this.handleCSVResult(csvString);\n    let perCapitaResults = this.handleUSPerCapita(results);\n    return perCapitaResults;\n  },\n\n  handleUSNewCasesPerCapita: function(csvString) {\n    let results = this.handleNewCases(csvString);\n    let perCapitaResults = this.handleUSPerCapita(results);\n    return perCapitaResults;\n  },\n\n  handleStateCSVResult: function(csvString, fips) {\n    // Split csv to rows array\n    var rows = csvString.split('\\n');\n    let newRows = rows.map(element => element.split(\",\"));\n    let selectedState = [];\n    for (let i = 1; i < newRows.length; i++) {\n      // eslint-disable-next-line\n      if (newRows[i][2] == fips) {\n        selectedState.push(newRows[i]);\n      }\n    }\n    let dateArr = selectedState.map(element => element[0]);\n    let casesArr = selectedState.map(element => element[3]);\n    let deathsArr = selectedState.map(element => element[4]);\n    let stateName = selectedState[1][1];\n    selectedState = [dateArr, casesArr, deathsArr, stateName];\n    return selectedState;\n  },\n\n  handleStatesToggle: function(csvString, fips) {\n    let selectedState = this.handleStateCSVResult(csvString, fips);\n    //create array of new cases found each day\n    let newCases = [];\n    for (let i = 1; i < selectedState[1].length; i++) {\n      let element;\n      element = selectedState[1][i] - selectedState[1][i-1];\n      newCases.push(element);\n    }\n    console.log(`new cases: `, newCases);\n    let newDeaths = [];\n    for (let i = 1; i < selectedState[2].length; i++) {\n      let element;\n      element = selectedState[2][i] - selectedState[2][i-1];\n      newDeaths.push(element);\n    }\n    console.log(`new deaths: `, newDeaths);\n    let newResults = [selectedState[0], newCases, newDeaths, selectedState[3]]\n    console.log(`newResults: `, newResults);\n    return newResults;\n  }\n}\n\n\n\n\n/*\nlet Alabama=[];\nlet Alaska=[];\nlet Arizona=[];\nlet Arkansas=[];\nlet California=[];\nlet Colorado=[];\nlet Connecticut=[];\nlet Delaware=[];\nlet DC=[];\nlet Florida=[];\nlet Georgia=[];\nlet Hawaii=[];\nlet Idaho=[];\nlet Kansas=[];\nlet Kentucky=[];\nlet Louisiana=[];\nlet Maine=[];\nlet Maryland=[];\nlet Massachusetts=[];\nlet Michigan=[];\nlet Minnesota=[];\nlet Mississippi=[];\nlet Missouri=[];\nlet Montana=[];\nlet Nebraska=[];\nlet Nevada=[];\nlet NewHampshire=[];\nlet NewJersey=[];\nlet NewMexico=[];\nlet NewYork=[];\nlet NorthCarolina=[];\nlet NorthDakota=[];\nlet Ohio=[];\nlet Oklahoma=[];\nlet Oregon=[];\nlet Pennsylvania=[];\nlet RhodeIsland=[];\nlet SouthCarolina=[];\nlet SouthDakota=[];\nlet Tennessee=[];\nlet Texas=[];\nlet Utah=[];\nlet Vermont=[];\nlet Virginia=[];\nlet Washington=[];\nlet WestVirginia=[];\nlet Wisconsin=[];\nlet Wyoming=[];\nlet AmericanSamoa=[];\nlet Micronesia=[];\nlet Guam=[];\nlet Mariana=[];\nlet Palau=[];\nlet PuertoRico=[];\nlet VirginIslands=[];\n*/\n"]},"metadata":{},"sourceType":"module"}