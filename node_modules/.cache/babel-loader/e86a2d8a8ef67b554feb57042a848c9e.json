{"ast":null,"code":"export const Covid = {\n  handleDates(dates, number) {\n    let dateObjArr = dates.map(element => new Date(element));\n    dateObjArr = dateObjArr.map(element => element.setDate(element.getDate() + number));\n    dateObjArr = dateObjArr.map(element => new Date(element));\n    dateObjArr = dateObjArr.map(element => element.toDateString());\n    return dates;\n  },\n\n  handleUSCSVResult(csvString) {\n    // Split csv to rows array\n    var rows = csvString.split('\\n');\n    let newRows = rows.map(element => element.split(\",\"));\n    let dateArr = newRows.map(element => element[0]);\n    dateArr.shift();\n    let dates = this.handleDates(dateArr);\n    console.log(dates);\n    let casesArr = newRows.map(element => element[1]);\n    casesArr.shift();\n    let deathsArr = newRows.map(element => element[2]);\n    deathsArr.shift();\n    newRows = [dates, casesArr, deathsArr];\n    console.log(`US cases: `, newRows);\n    return newRows;\n  },\n\n  handleUSTotalPerCapita(csvString) {\n    let results = this.handleUSCSVResult(csvString);\n    let cases = [];\n\n    for (let i = 1; i < results[1].length; i++) {\n      let element;\n      element = Math.ceil(100000 * results[1][i] / 328239523);\n      cases.push(element);\n    }\n\n    console.log(`cases per 100,000 people: `, cases);\n    let deaths = [];\n\n    for (let i = 1; i < results[2].length; i++) {\n      let element;\n      element = Math.ceil(1000 * results[1][i] / 328239523);\n      deaths.push(element);\n    }\n\n    console.log(`deaths per 100,000 people: `, deaths);\n    let perCapitaResults = [results[0], cases, deaths];\n    console.log(`perCapitaResults: `, perCapitaResults);\n    return perCapitaResults;\n  },\n\n  handleUSNewPerCapita(csvString) {\n    let results = this.handleUSTotalPerCapita(csvString);\n    let newCases = [];\n\n    for (let i = 1; i < results[1].length; i++) {\n      let element;\n      element = results[1][i] - results[1][i - 1];\n      newCases.push(element);\n    }\n\n    console.log(`new cases per capita: `, newCases);\n    let newDeaths = [];\n\n    for (let i = 1; i < results[2].length; i++) {\n      let element;\n      element = results[2][i] - results[2][i - 1];\n      newDeaths.push(element);\n    }\n\n    console.log(`new deaths per capita: `, newDeaths);\n    let newResults = [results[0], newCases, newDeaths];\n    console.log(`newResults per capita: `, newResults);\n    return newResults;\n  },\n\n  handleUSNewCases(csvString) {\n    let results = this.handleUSCSVResult(csvString);\n    let newCases = [];\n    let dateArr = this.handleDates(results[0], 2);\n\n    for (let i = 1; i < results[1].length; i++) {\n      let element;\n      element = results[1][i] - results[1][i - 1];\n      newCases.push(element);\n    }\n\n    console.log(`new cases: `, newCases);\n    let newDeaths = [];\n\n    for (let i = 1; i < results[2].length; i++) {\n      let element;\n      element = results[2][i] - results[2][i - 1];\n      newDeaths.push(element);\n    }\n\n    console.log(`new deaths: `, newDeaths);\n    let newResults = [dateArr, newCases, newDeaths];\n    console.log(`newResults: `, newResults);\n    return newResults;\n  },\n\n  handleStatesCSVResult(csvString, fips) {\n    // Split csv to rows array\n    var rows = csvString.split('\\n');\n    let newRows = rows.map(element => element.split(\",\"));\n    let selectedState = [];\n\n    for (let i = 1; i < newRows.length; i++) {\n      // eslint-disable-next-line\n      if (newRows[i][2] == fips) {\n        selectedState.push(newRows[i]);\n      }\n    }\n\n    let dateArr = selectedState.map(element => element[0]);\n    dateArr.map(element => element.toDateString());\n    let casesArr = selectedState.map(element => element[3]);\n    let deathsArr = selectedState.map(element => element[4]);\n    let stateName = selectedState[1][1];\n    selectedState = [dateArr, casesArr, deathsArr, stateName];\n    return selectedState;\n  },\n\n  handleStatesNewCases(csvString, fips) {\n    let selectedState = this.handleStatesCSVResult(csvString, fips); //create array of new cases found each day\n\n    let newCases = [];\n\n    for (let i = 1; i < selectedState[1].length; i++) {\n      let element;\n      element = selectedState[1][i] - selectedState[1][i - 1];\n      newCases.push(element);\n    }\n\n    console.log(`new cases: `, newCases);\n    let newDeaths = [];\n\n    for (let i = 1; i < selectedState[2].length; i++) {\n      let element;\n      element = selectedState[2][i] - selectedState[2][i - 1];\n      newDeaths.push(element);\n    }\n\n    console.log(`new deaths: `, newDeaths);\n    let newResults = [selectedState[0], newCases, newDeaths, selectedState[3]];\n    console.log(`newResults: `, newResults);\n    return newResults;\n  },\n\n  handleStatesTotalPerCapita(csvString, fips) {\n    let results = this.handleStatesCSVResult(csvString, fips);\n    let stateName = results[3];\n    let population;\n    let cases = []; // eslint-disable-next-line\n\n    switch (fips) {\n      case 1:\n        population = 4903185;\n        break;\n\n      case 2:\n        population = 731545;\n        break;\n\n      case 4:\n        population = 7278717;\n        break;\n\n      case 5:\n        population = 3017804;\n        break;\n\n      case 6:\n        population = 39512223;\n        break;\n\n      case 8:\n        population = 5758736;\n        break;\n\n      case 9:\n        population = 3565287;\n        break;\n\n      case 10:\n        population = 973764;\n        break;\n\n      case 11:\n        population = 705749;\n        break;\n\n      case 12:\n        population = 21477737;\n        break;\n\n      case 13:\n        population = 10617423;\n        break;\n\n      case 15:\n        population = 1415872;\n        break;\n\n      case 16:\n        population = 1787065;\n        break;\n\n      case 17:\n        population = 12671821;\n        break;\n\n      case 18:\n        population = 6732219;\n        break;\n\n      case 19:\n        population = 3155070;\n        break;\n\n      case 20:\n        population = 2913314;\n        break;\n\n      case 21:\n        population = 4467673;\n        break;\n\n      case 22:\n        population = 4648794;\n        break;\n\n      case 23:\n        population = 1344212;\n        break;\n\n      case 24:\n        population = 6045680;\n        break;\n\n      case 25:\n        population = 6892503;\n        break;\n\n      case 26:\n        population = 9986857;\n        break;\n\n      case 27:\n        population = 5639632;\n        break;\n\n      case 28:\n        population = 2976149;\n        break;\n\n      case 29:\n        population = 6137428;\n        break;\n\n      case 30:\n        population = 1068778;\n        break;\n\n      case 31:\n        population = 1934408;\n        break;\n\n      case 32:\n        population = 3080156;\n        break;\n\n      case 33:\n        population = 1359711;\n        break;\n\n      case 34:\n        population = 8882190;\n        break;\n\n      case 35:\n        population = 2096829;\n        break;\n\n      case 36:\n        population = 19453561;\n        break;\n\n      case 37:\n        population = 10488084;\n        break;\n\n      case 38:\n        population = 762062;\n        break;\n\n      case 39:\n        population = 11689100;\n        break;\n\n      case 40:\n        population = 3956971;\n        break;\n\n      case 41:\n        population = 4217737;\n        break;\n\n      case 42:\n        population = 12801989;\n        break;\n\n      case 44:\n        population = 1059361;\n        break;\n\n      case 45:\n        population = 5148714;\n        break;\n\n      case 46:\n        population = 884659;\n        break;\n\n      case 47:\n        population = 6829174;\n        break;\n\n      case 48:\n        population = 28995881;\n        break;\n\n      case 49:\n        population = 3205958;\n        break;\n\n      case 50:\n        population = 623989;\n        break;\n\n      case 51:\n        population = 8535519;\n        break;\n\n      case 53:\n        population = 7614893;\n        break;\n\n      case 54:\n        population = 1792147;\n        break;\n\n      case 55:\n        population = 5822434;\n        break;\n\n      case 56:\n        population = 578759;\n        break;\n\n      case 60:\n        population = 55465;\n        break;\n\n      case 66:\n        population = 165768;\n        break;\n\n      case 69:\n        population = 56882;\n        break;\n\n      case 72:\n        population = 3193694;\n        break;\n\n      case 78:\n        population = 106977;\n        break;\n    }\n\n    for (let i = 1; i < results[1].length; i++) {\n      let element;\n      element = Math.ceil(100000 * results[1][i] / population);\n      cases.push(element);\n    }\n\n    console.log(`cases per 100,000 people: `, cases);\n    let deaths = [];\n\n    for (let i = 1; i < results[2].length; i++) {\n      let element;\n      element = Math.ceil(1000 * results[1][i] / population);\n      deaths.push(element);\n    }\n\n    console.log(`deaths per 100,000 people: `, deaths);\n    let perCapitaResults = [results[0], cases, deaths, stateName];\n    console.log(`perCapitaResults: `, perCapitaResults);\n    return perCapitaResults;\n  },\n\n  handleStatesNewPerCapita(csvString, fips) {\n    let results = this.handleStatesTotalPerCapita(csvString, fips);\n    let stateName = results[3];\n    let newCases = [];\n\n    for (let i = 1; i < results[1].length; i++) {\n      let element;\n      element = results[1][i] - results[1][i - 1];\n      newCases.push(element);\n    }\n\n    console.log(`new cases per capita: `, newCases);\n    let newDeaths = [];\n\n    for (let i = 1; i < results[2].length; i++) {\n      let element;\n      element = results[2][i] - results[2][i - 1];\n      newDeaths.push(element);\n    }\n\n    console.log(`new deaths per capita: `, newDeaths);\n    let newResults = [results[0], newCases, newDeaths, stateName];\n    console.log(`newResults per capita: `, newResults);\n    return newResults;\n  }\n\n};","map":{"version":3,"sources":["/Users/christinealbert/Coding/covid-19-app/src/Data/data.js"],"names":["Covid","handleDates","dates","number","dateObjArr","map","element","Date","setDate","getDate","toDateString","handleUSCSVResult","csvString","rows","split","newRows","dateArr","shift","console","log","casesArr","deathsArr","handleUSTotalPerCapita","results","cases","i","length","Math","ceil","push","deaths","perCapitaResults","handleUSNewPerCapita","newCases","newDeaths","newResults","handleUSNewCases","handleStatesCSVResult","fips","selectedState","stateName","handleStatesNewCases","handleStatesTotalPerCapita","population","handleStatesNewPerCapita"],"mappings":"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","sourcesContent":["export const Covid = {\n\n  handleDates(dates, number) {\n    let dateObjArr = dates.map(element => new Date(element));\n    dateObjArr = dateObjArr.map(element => element.setDate(element.getDate() + number));\n    dateObjArr = dateObjArr.map(element => new Date(element));\n    dateObjArr = dateObjArr.map(element => element.toDateString());\n    return dates;\n  },\n  handleUSCSVResult(csvString) {\n    // Split csv to rows array\n    var rows = csvString.split('\\n');\n    let newRows = rows.map(element => element.split(\",\"));\n    let dateArr = newRows.map(element => element[0]);\n    dateArr.shift();\n    \n    let dates = this.handleDates(dateArr);\n    console.log(dates)\n    let casesArr = newRows.map(element => element[1]);\n    casesArr.shift();\n    let deathsArr = newRows.map(element => element[2]);\n    deathsArr.shift();\n    newRows = [dates, casesArr, deathsArr];\n    console.log(`US cases: `, newRows);\n    return newRows;\n  },\n\n  handleUSTotalPerCapita(csvString) {\n    let results = this.handleUSCSVResult(csvString);\n    let cases = [];\n    for (let i = 1; i < results[1].length; i++) {\n      let element;\n      element = Math.ceil((100000 * results[1][i])/328239523);\n      cases.push(element);\n    }\n    console.log(`cases per 100,000 people: `, cases);\n    let deaths = [];\n    for (let i = 1; i < results[2].length; i++) {\n      let element;\n      element = Math.ceil((1000 * results[1][i])/328239523);\n      deaths.push(element);\n    }\n    console.log(`deaths per 100,000 people: `, deaths);\n    let perCapitaResults = [results[0], cases, deaths];\n    console.log(`perCapitaResults: `, perCapitaResults);\n    return perCapitaResults;\n  },\n\n  handleUSNewPerCapita(csvString) {\n    let results = this.handleUSTotalPerCapita(csvString);\n    let newCases = [];\n    for (let i = 1; i < results[1].length; i++) {\n      let element;\n      element = results[1][i] - results[1][i-1];\n      newCases.push(element);\n    }\n    console.log(`new cases per capita: `, newCases);\n    let newDeaths = [];\n    for (let i = 1; i < results[2].length; i++) {\n      let element;\n      element = results[2][i] - results[2][i-1];\n      newDeaths.push(element);\n    }\n    console.log(`new deaths per capita: `, newDeaths);\n    let newResults = [results[0], newCases, newDeaths]\n    console.log(`newResults per capita: `, newResults);\n    return newResults;\n  },\n\n  handleUSNewCases(csvString) {\n    let results = this.handleUSCSVResult(csvString);\n    \n    let newCases = [];\n    \n    let dateArr = this.handleDates(results[0], 2);\n    for (let i = 1; i < results[1].length; i++) {\n      let element;\n      element = results[1][i] - results[1][i-1];\n      newCases.push(element);\n    }\n    console.log(`new cases: `, newCases);\n    let newDeaths = [];\n    for (let i = 1; i < results[2].length; i++) {\n      let element;\n      element = results[2][i] - results[2][i-1];\n      newDeaths.push(element);\n    }\n    console.log(`new deaths: `, newDeaths);\n    let newResults = [dateArr, newCases, newDeaths]\n    console.log(`newResults: `, newResults);\n    return newResults;\n  },\n\n  handleStatesCSVResult(csvString, fips) {\n    // Split csv to rows array\n    var rows = csvString.split('\\n');\n    let newRows = rows.map(element => element.split(\",\"));\n    let selectedState = [];\n    for (let i = 1; i < newRows.length; i++) {\n      // eslint-disable-next-line\n      if (newRows[i][2] == fips) {\n        selectedState.push(newRows[i]);\n      }\n    }\n    let dateArr = selectedState.map(element => element[0]);\n    dateArr.map(element => element.toDateString());\n    let casesArr = selectedState.map(element => element[3]);\n    let deathsArr = selectedState.map(element => element[4]);\n    let stateName = selectedState[1][1];\n    selectedState = [dateArr, casesArr, deathsArr, stateName];\n    return selectedState;\n  },\n\n  handleStatesNewCases(csvString, fips) {\n    let selectedState = this.handleStatesCSVResult(csvString, fips);\n    //create array of new cases found each day\n    let newCases = [];\n    for (let i = 1; i < selectedState[1].length; i++) {\n      let element;\n      element = selectedState[1][i] - selectedState[1][i-1];\n      newCases.push(element);\n    }\n    console.log(`new cases: `, newCases);\n    let newDeaths = [];\n    for (let i = 1; i < selectedState[2].length; i++) {\n      let element;\n      element = selectedState[2][i] - selectedState[2][i-1];\n      newDeaths.push(element);\n    }\n    console.log(`new deaths: `, newDeaths);\n    let newResults = [selectedState[0], newCases, newDeaths, selectedState[3]]\n    console.log(`newResults: `, newResults);\n    return newResults;\n  },\n\n  handleStatesTotalPerCapita(csvString, fips) {\n    let results = this.handleStatesCSVResult(csvString, fips);\n    let stateName = results[3];\n    let population;\n    let cases = [];\n    // eslint-disable-next-line\n    switch(fips) {\n      case 1:\n        population = 4903185;\n        break;\n      case 2:\n        population = 731545;\n        break;\n      case 4:\n        population = 7278717;\n        break;\n      case 5:\n        population = 3017804;\n        break;\n      case 6:\n        population = 39512223;\n        break;\n      case 8:\n        population = 5758736;\n        break;\n      case 9:\n        population = 3565287;\n        break;\n      case 10:\n        population = 973764;\n        break;\n      case 11:\n        population = 705749;\n        break;\n      case 12:\n        population = 21477737;\n        break;\n      case 13:\n        population = 10617423;\n        break;\n      case 15:\n        population = 1415872;\n        break;\n      case 16:\n        population = 1787065;\n        break;\n      case 17:\n        population = 12671821;\n        break;\n      case 18:\n        population = 6732219;\n        break;\n      case 19:\n        population = 3155070;\n        break;\n      case 20:\n        population = 2913314;\n        break;\n      case 21:\n        population = 4467673;\n        break;\n      case 22:\n        population = 4648794;\n        break;\n      case 23:\n        population = 1344212;\n        break;\n      case 24:\n        population = 6045680;\n        break;\n      case 25:\n        population = 6892503;\n        break;\n      case 26:\n        population = 9986857;\n        break;\n      case 27:\n        population = 5639632;\n        break;\n      case 28:\n        population = 2976149;\n        break;\n      case 29:\n        population = 6137428;\n        break;\n      case 30:\n        population = 1068778;\n        break;\n      case 31:\n        population = 1934408;\n        break;\n      case 32:\n        population = 3080156;\n        break;\n      case 33:\n        population = 1359711;\n        break;\n      case 34:\n        population = 8882190;\n        break;\n      case 35:\n        population = 2096829;\n        break;\n      case 36:\n        population = 19453561;\n        break;\n      case 37:\n        population = 10488084;\n        break;\n      case 38:\n        population = 762062;\n        break;\n      case 39:\n        population = 11689100;\n        break;\n      case 40:\n        population = 3956971;\n        break;\n      case 41:\n        population = 4217737;\n        break;\n      case 42:\n        population = 12801989;\n        break;\n      case 44:\n        population = 1059361;\n        break;\n      case 45:\n        population = 5148714;\n        break;\n      case 46:\n        population = 884659;\n        break;\n      case 47:\n        population = 6829174;\n        break;\n      case 48:\n        population = 28995881;\n        break;\n      case 49:\n        population = 3205958;\n        break;\n      case 50:\n        population = 623989;\n        break;\n      case 51:\n        population = 8535519;\n        break;\n      case 53:\n        population = 7614893;\n        break;\n      case 54:\n        population = 1792147;\n        break;\n      case 55:\n        population = 5822434;\n        break;\n      case 56:\n        population = 578759;\n        break;\n      case 60:\n        population = 55465;\n        break;\n      case 66:\n        population = 165768;\n        break;\n      case 69:\n        population = 56882;\n        break;\n      case 72:\n        population = 3193694;\n        break;\n      case 78:\n        population = 106977;\n        break;                             \n    }\n    for (let i = 1; i < results[1].length; i++) {\n      let element;\n      element = Math.ceil((100000 * results[1][i])/population);\n      cases.push(element);\n    }\n    console.log(`cases per 100,000 people: `, cases);\n    let deaths = [];\n    for (let i = 1; i < results[2].length; i++) {\n      let element;\n      element = Math.ceil((1000 * results[1][i])/population);\n      deaths.push(element);\n    }\n    console.log(`deaths per 100,000 people: `, deaths);\n    let perCapitaResults = [results[0], cases, deaths, stateName];\n    console.log(`perCapitaResults: `, perCapitaResults);\n    return perCapitaResults;\n  },\n\n  handleStatesNewPerCapita(csvString, fips) {\n    let results = this.handleStatesTotalPerCapita(csvString, fips);\n    let stateName = results[3];\n    let newCases = [];\n    for (let i = 1; i < results[1].length; i++) {\n      let element;\n      element = results[1][i] - results[1][i-1];\n      newCases.push(element);\n    }\n    console.log(`new cases per capita: `, newCases);\n    let newDeaths = [];\n    for (let i = 1; i < results[2].length; i++) {\n      let element;\n      element = results[2][i] - results[2][i-1];\n      newDeaths.push(element);\n    }\n    console.log(`new deaths per capita: `, newDeaths);\n    let newResults = [results[0], newCases, newDeaths, stateName];\n    console.log(`newResults per capita: `, newResults);\n    return newResults;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}