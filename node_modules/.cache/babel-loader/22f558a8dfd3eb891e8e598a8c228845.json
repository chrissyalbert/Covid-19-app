{"ast":null,"code":"var _jsxFileName = \"/Users/christinealbert/Coding/covid-19-app/src/components/App.js\";\nimport React from 'react'; // eslint-disable-next-line\n\nimport classes from './App.module.css'; //import Dashboard from './Dashboard/Dashboard';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      washington: {\n        dates: []\n      }\n    };\n  }\n\n  componentDidMount() {\n    var csvUrl = prcoess.env.csvUrl; //'https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv';\n\n    function handleCSVResult(csvString) {\n      // Get the div element to append the data to\n      var dataArea = document.getElementById('csv-data'); // Split csv to rows array\n\n      var rows = csvString.split('\\n'); //console.log(rows);\n\n      let newRows = rows.map(element => element.split(\",\"));\n      console.log(newRows);\n      let washington = [];\n\n      for (let i = 1; i < newRows.length; i++) {\n        if (newRows[i][1] === \"Washington\") {\n          washington.push(newRows[i]);\n        } //washington = newRows.filter(element => element[i][1] === \"Washington\");\n\n      } //rows.filter(row => row[1] === \"Washington\");\n\n\n      console.log(washington);\n      var htmlStr = ''; // Iterate over each row\n\n      for (var i = 0; i < rows.length; i++) {\n        var row = rows[i]; //console.log(row);\n        // split row to cells\n\n        var cells = row.split(','); // Extract data from cells of current row\n\n        var date = cells[0];\n        var state = cells[1]; // eslint-disable-next-line\n\n        var fips = cells[2];\n        var cases = cells[3];\n        var deaths = cells[4]; // Add extracted CSV data to string\n\n        htmlStr += `<p>Date: ${date}, state: ${state}, cases: ${cases}, deaths: ${deaths}</p><br>`;\n      } //console.log(htmlStr);\n      // Set the string generated from CSV as HTML of the dedicated div\n\n\n      dataArea.innerHTML = htmlStr;\n    } // Init Ajax Object\n\n\n    var ajax = new XMLHttpRequest(); // Set a GET request to the URL which points to your CSV file\n\n    ajax.open('GET', csvUrl); // Set the action that will take place once the browser receives your CSV\n\n    ajax.onreadystatechange = function () {\n      if (ajax.readyState === XMLHttpRequest.DONE && ajax.status === 200) {\n        // Request was successful\n        var csvData = ajax.responseText; // Do something with that data here\n\n        handleCSVResult(csvData);\n      }\n    }; // Send request\n\n\n    ajax.send();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      id: \"csv-data\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, null));\n  }\n\n}\n\nexport default App;\n/*\n <Dashboard \n    cases=\n/>\n\n*/","map":{"version":3,"sources":["/Users/christinealbert/Coding/covid-19-app/src/components/App.js"],"names":["React","classes","App","Component","constructor","props","state","washington","dates","componentDidMount","csvUrl","prcoess","env","handleCSVResult","csvString","dataArea","document","getElementById","rows","split","newRows","map","element","console","log","i","length","push","htmlStr","row","cells","date","fips","cases","deaths","innerHTML","ajax","XMLHttpRequest","open","onreadystatechange","readyState","DONE","status","csvData","responseText","send","render"],"mappings":"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","sourcesContent":["import React from 'react';\n// eslint-disable-next-line\nimport classes from './App.module.css';\n//import Dashboard from './Dashboard/Dashboard';\n\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      washington: {\n        dates: []\n      }\n      \n    }\n  }\n\ncomponentDidMount() {\n  var csvUrl = prcoess.env.csvUrl  //'https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv';\n\n  function handleCSVResult(csvString) {\n  // Get the div element to append the data to\n  var dataArea = document.getElementById('csv-data');\n  \n  // Split csv to rows array\n  var rows = csvString.split('\\n');\n  //console.log(rows);\n  let newRows = rows.map(element => element.split(\",\"));\n  console.log(newRows);\n  let washington = [];\n  for (let i = 1; i < newRows.length; i++) {\n    if (newRows[i][1] === \"Washington\") {\n      washington.push(newRows[i]);\n    }\n    //washington = newRows.filter(element => element[i][1] === \"Washington\");\n  }\n  //rows.filter(row => row[1] === \"Washington\");\n  console.log(washington);\n  var htmlStr = '';\n  \n  // Iterate over each row\n  for (var i = 0; i < rows.length; i++) {\n    var row = rows[i];\n    \n    //console.log(row);\n    // split row to cells\n    var cells = row.split(',');\n    \n    // Extract data from cells of current row\n    var date = cells[0];\n    var state = cells[1];\n    // eslint-disable-next-line\n    var fips = cells[2];\n    var cases = cells[3];\n    var deaths = cells[4];\n    \n    // Add extracted CSV data to string\n    htmlStr += `<p>Date: ${date}, state: ${state}, cases: ${cases}, deaths: ${deaths}</p><br>`;\n  }\n  \n  //console.log(htmlStr);\n  // Set the string generated from CSV as HTML of the dedicated div\n  dataArea.innerHTML = htmlStr;\n}\n\n// Init Ajax Object\nvar ajax = new XMLHttpRequest();\n\n// Set a GET request to the URL which points to your CSV file\najax.open('GET', csvUrl);\n\n// Set the action that will take place once the browser receives your CSV\najax.onreadystatechange = function() {\n    if(ajax.readyState === XMLHttpRequest.DONE && ajax.status === 200) {\n        // Request was successful\n        var csvData = ajax.responseText;\n\n        // Do something with that data here\n        handleCSVResult(csvData);\n    }\n}\n\n// Send request\najax.send();\n  }\n  \n  render() {\n    return (\n      <div className=\"App\" id=\"csv-data\">\n        <>\n        \n        </>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n/*\n <Dashboard \n    cases=\n/>\n\n*/"]},"metadata":{},"sourceType":"module"}