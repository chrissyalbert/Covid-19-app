{"ast":null,"code":"var _jsxFileName = \"/Users/christinealbert/Coding/covid-19-app/src/components/App.js\";\nimport React from 'react';\nimport classes from './App.module.css';\nvar csvUrl = 'https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv';\n\nfunction handleCSVResult(csvString) {\n  // Get the div element to append the data to\n  var dataArea = document.getElementById('csv-data'); // Split csv to rows\n\n  var rows = csvString.split('\\n');\n  var htmlStr = ''; // Iterate over each row\n\n  for (var i = 0; i < rows.length; i++) {\n    var row = rows[i];\n    console.log(typeof sv); //console.log(row);\n    // split row to cells\n\n    var cells = row.split(','); // Extract data from cells of current row\n\n    var date = cells[0];\n    var state = cells[1]; // eslint-disable-next-line\n\n    var fips = cells[2];\n    var cases = cells[3];\n    var deaths = cells[4]; // Add extracted CSV data to string\n\n    htmlStr += `<p>Date: ${date}, state: ${state}, cases: ${cases}, deaths: ${deaths}</p><br>`;\n  } //console.log(htmlStr);\n  // Set the string generated from CSV as HTML of the dedicated div\n\n\n  dataArea.innerHTML = htmlStr;\n} // Init Ajax Object\n\n\nvar ajax = new XMLHttpRequest(); // Set a GET request to the URL which points to your CSV file\n\najax.open('GET', csvUrl); // Set the action that will take place once the browser receives your CSV\n\najax.onreadystatechange = function () {\n  if (ajax.readyState === XMLHttpRequest.DONE && ajax.status === 200) {\n    // Request was successful\n    var csvData = ajax.responseText; // Do something with that data here\n\n    handleCSVResult(csvData);\n  }\n}; // Send request\n\n\najax.send();\n\nfunction App() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    id: \"csv-data\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(React.Fragment, null));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/christinealbert/Coding/covid-19-app/src/components/App.js"],"names":["React","classes","csvUrl","handleCSVResult","csvString","dataArea","document","getElementById","rows","split","htmlStr","i","length","row","console","log","sv","cells","date","state","fips","cases","deaths","innerHTML","ajax","XMLHttpRequest","open","onreadystatechange","readyState","DONE","status","csvData","responseText","send","App"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,IAAIC,MAAM,GAAG,8EAAb;;AAEA,SAASC,eAAT,CAAyBC,SAAzB,EAAoC;AAClC;AACA,MAAIC,QAAQ,GAAGC,QAAQ,CAACC,cAAT,CAAwB,UAAxB,CAAf,CAFkC,CAIlC;;AACA,MAAIC,IAAI,GAAGJ,SAAS,CAACK,KAAV,CAAgB,IAAhB,CAAX;AAEA,MAAIC,OAAO,GAAG,EAAd,CAPkC,CASlC;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAAI,CAACI,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,QAAIE,GAAG,GAAGL,IAAI,CAACG,CAAD,CAAd;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAOC,EAAnB,EAFoC,CAGpC;AACA;;AACA,QAAIC,KAAK,GAAGJ,GAAG,CAACJ,KAAJ,CAAU,GAAV,CAAZ,CALoC,CAOpC;;AACA,QAAIS,IAAI,GAAGD,KAAK,CAAC,CAAD,CAAhB;AACA,QAAIE,KAAK,GAAGF,KAAK,CAAC,CAAD,CAAjB,CAToC,CAUpC;;AACA,QAAIG,IAAI,GAAGH,KAAK,CAAC,CAAD,CAAhB;AACA,QAAII,KAAK,GAAGJ,KAAK,CAAC,CAAD,CAAjB;AACA,QAAIK,MAAM,GAAGL,KAAK,CAAC,CAAD,CAAlB,CAboC,CAepC;;AACAP,IAAAA,OAAO,IAAK,YAAWQ,IAAK,YAAWC,KAAM,YAAWE,KAAM,aAAYC,MAAO,UAAjF;AACD,GA3BiC,CA6BlC;AACA;;;AACAjB,EAAAA,QAAQ,CAACkB,SAAT,GAAqBb,OAArB;AACD,C,CAED;;;AACA,IAAIc,IAAI,GAAG,IAAIC,cAAJ,EAAX,C,CAEA;;AACAD,IAAI,CAACE,IAAL,CAAU,KAAV,EAAiBxB,MAAjB,E,CAEA;;AACAsB,IAAI,CAACG,kBAAL,GAA0B,YAAW;AACjC,MAAGH,IAAI,CAACI,UAAL,KAAoBH,cAAc,CAACI,IAAnC,IAA2CL,IAAI,CAACM,MAAL,KAAgB,GAA9D,EAAmE;AAC/D;AACA,QAAIC,OAAO,GAAGP,IAAI,CAACQ,YAAnB,CAF+D,CAI/D;;AACA7B,IAAAA,eAAe,CAAC4B,OAAD,CAAf;AACH;AACJ,CARD,C,CAUA;;;AACAP,IAAI,CAACS,IAAL;;AACA,SAASC,GAAT,GAAe;AACb,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAqB,IAAA,EAAE,EAAC,UAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,yCADF,CADF;AAOD;;AAED,eAAeA,GAAf","sourcesContent":["import React from 'react';\nimport classes from './App.module.css';\nvar csvUrl = 'https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv';\n\nfunction handleCSVResult(csvString) {\n  // Get the div element to append the data to\n  var dataArea = document.getElementById('csv-data');\n  \n  // Split csv to rows\n  var rows = csvString.split('\\n');\n  \n  var htmlStr = '';\n  \n  // Iterate over each row\n  for (var i = 0; i < rows.length; i++) {\n    var row = rows[i];\n    console.log(typeof sv);\n    //console.log(row);\n    // split row to cells\n    var cells = row.split(',');\n    \n    // Extract data from cells of current row\n    var date = cells[0];\n    var state = cells[1];\n    // eslint-disable-next-line\n    var fips = cells[2];\n    var cases = cells[3];\n    var deaths = cells[4];\n    \n    // Add extracted CSV data to string\n    htmlStr += `<p>Date: ${date}, state: ${state}, cases: ${cases}, deaths: ${deaths}</p><br>`;\n  }\n  \n  //console.log(htmlStr);\n  // Set the string generated from CSV as HTML of the dedicated div\n  dataArea.innerHTML = htmlStr;\n}\n\n// Init Ajax Object\nvar ajax = new XMLHttpRequest();\n\n// Set a GET request to the URL which points to your CSV file\najax.open('GET', csvUrl);\n\n// Set the action that will take place once the browser receives your CSV\najax.onreadystatechange = function() {\n    if(ajax.readyState === XMLHttpRequest.DONE && ajax.status === 200) {\n        // Request was successful\n        var csvData = ajax.responseText;\n\n        // Do something with that data here\n        handleCSVResult(csvData);\n    }\n}\n\n// Send request\najax.send();\nfunction App() {\n  return (\n    <div className=\"App\" id=\"csv-data\">\n      <>\n      {}\n      </>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}