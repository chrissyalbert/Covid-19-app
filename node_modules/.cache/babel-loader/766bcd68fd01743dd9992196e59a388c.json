{"ast":null,"code":"export const Covid = {\n  handleUSCSVResult(csvString) {\n    // Split csv to rows array\n    var rows = csvString.split('\\n');\n    let newRows = rows.map(element => element.split(\",\"));\n    let dateArr = newRows.map(element => element[0]);\n    dateArr.shift();\n    let casesArr = newRows.map(element => element[1]);\n    casesArr.shift();\n    let deathsArr = newRows.map(element => element[2]);\n    deathsArr.shift();\n    newRows = [dateArr, casesArr, deathsArr];\n    console.log(`US cases: `, newRows);\n    return newRows;\n  },\n\n  handleUSTotalPerCapita(csvString) {\n    let results = this.handleUSCSVResult(csvString);\n    let cases = [];\n\n    for (let i = 1; i < results[1].length; i++) {\n      let element;\n      element = Math.ceil(100000 * results[1][i] / 328239523);\n      cases.push(element);\n    }\n\n    console.log(`cases per 100,000 people: `, cases);\n    let deaths = [];\n\n    for (let i = 1; i < results[2].length; i++) {\n      let element;\n      element = Math.ceil(1000 * results[1][i] / 328239523);\n      deaths.push(element);\n    }\n\n    console.log(`deaths per 100,000 people: `, deaths);\n    let perCapitaResults = [results[0], cases, deaths];\n    console.log(`perCapitaResults: `, perCapitaResults);\n    return perCapitaResults;\n  },\n\n  handleUSNewPerCapita(csvString) {\n    let results = this.handleUSTotalPerCapita(cs);\n  },\n\n  handleUSNewCases(csvString) {\n    let results = this.handleUSCSVResult(csvString);\n    let newCases = [];\n\n    for (let i = 1; i < results[1].length; i++) {\n      let element;\n      element = results[1][i] - results[1][i - 1];\n      newCases.push(element);\n    }\n\n    console.log(`new cases: `, newCases);\n    let newDeaths = [];\n\n    for (let i = 1; i < results[2].length; i++) {\n      let element;\n      element = results[2][i] - results[2][i - 1];\n      newDeaths.push(element);\n    }\n\n    console.log(`new deaths: `, newDeaths);\n    let newResults = [results[0], newCases, newDeaths];\n    console.log(`newResults: `, newResults);\n    return newResults;\n  },\n\n  handleStatesCSVResult(csvString, fips) {\n    // Split csv to rows array\n    var rows = csvString.split('\\n');\n    let newRows = rows.map(element => element.split(\",\"));\n    let selectedState = [];\n\n    for (let i = 1; i < newRows.length; i++) {\n      // eslint-disable-next-line\n      if (newRows[i][2] == fips) {\n        selectedState.push(newRows[i]);\n      }\n    }\n\n    let dateArr = selectedState.map(element => element[0]);\n    let casesArr = selectedState.map(element => element[3]);\n    let deathsArr = selectedState.map(element => element[4]);\n    let stateName = selectedState[1][1];\n    selectedState = [dateArr, casesArr, deathsArr, stateName];\n    return selectedState;\n  },\n\n  handleStatesNewCases(csvString, fips) {\n    let selectedState = this.handleStatesCSVResult(csvString, fips); //create array of new cases found each day\n\n    let newCases = [];\n\n    for (let i = 1; i < selectedState[1].length; i++) {\n      let element;\n      element = selectedState[1][i] - selectedState[1][i - 1];\n      newCases.push(element);\n    }\n\n    console.log(`new cases: `, newCases);\n    let newDeaths = [];\n\n    for (let i = 1; i < selectedState[2].length; i++) {\n      let element;\n      element = selectedState[2][i] - selectedState[2][i - 1];\n      newDeaths.push(element);\n    }\n\n    console.log(`new deaths: `, newDeaths);\n    let newResults = [selectedState[0], newCases, newDeaths, selectedState[3]];\n    console.log(`newResults: `, newResults);\n    return newResults;\n  }\n\n};\n/*\nlet Alabama=[];\nlet Alaska=[];\nlet Arizona=[];\nlet Arkansas=[];\nlet California=[];\nlet Colorado=[];\nlet Connecticut=[];\nlet Delaware=[];\nlet DC=[];\nlet Florida=[];\nlet Georgia=[];\nlet Hawaii=[];\nlet Idaho=[];\nlet Kansas=[];\nlet Kentucky=[];\nlet Louisiana=[];\nlet Maine=[];\nlet Maryland=[];\nlet Massachusetts=[];\nlet Michigan=[];\nlet Minnesota=[];\nlet Mississippi=[];\nlet Missouri=[];\nlet Montana=[];\nlet Nebraska=[];\nlet Nevada=[];\nlet NewHampshire=[];\nlet NewJersey=[];\nlet NewMexico=[];\nlet NewYork=[];\nlet NorthCarolina=[];\nlet NorthDakota=[];\nlet Ohio=[];\nlet Oklahoma=[];\nlet Oregon=[];\nlet Pennsylvania=[];\nlet RhodeIsland=[];\nlet SouthCarolina=[];\nlet SouthDakota=[];\nlet Tennessee=[];\nlet Texas=[];\nlet Utah=[];\nlet Vermont=[];\nlet Virginia=[];\nlet Washington=[];\nlet WestVirginia=[];\nlet Wisconsin=[];\nlet Wyoming=[];\nlet AmericanSamoa=[];\nlet Micronesia=[];\nlet Guam=[];\nlet Mariana=[];\nlet Palau=[];\nlet PuertoRico=[];\nlet VirginIslands=[];\n*/","map":{"version":3,"sources":["/Users/christinealbert/Coding/covid-19-app/src/Data/data.js"],"names":["Covid","handleUSCSVResult","csvString","rows","split","newRows","map","element","dateArr","shift","casesArr","deathsArr","console","log","handleUSTotalPerCapita","results","cases","i","length","Math","ceil","push","deaths","perCapitaResults","handleUSNewPerCapita","cs","handleUSNewCases","newCases","newDeaths","newResults","handleStatesCSVResult","fips","selectedState","stateName","handleStatesNewCases"],"mappings":"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","sourcesContent":["export const Covid = {\n  handleUSCSVResult(csvString) {\n    // Split csv to rows array\n    var rows = csvString.split('\\n');\n    let newRows = rows.map(element => element.split(\",\"));\n    let dateArr = newRows.map(element => element[0]);\n    dateArr.shift();\n    let casesArr = newRows.map(element => element[1]);\n    casesArr.shift();\n    let deathsArr = newRows.map(element => element[2]);\n    deathsArr.shift();\n    newRows = [dateArr, casesArr, deathsArr];\n    console.log(`US cases: `, newRows);\n    return newRows;\n  },\n\n  handleUSTotalPerCapita(csvString) {\n    let results = this.handleUSCSVResult(csvString);\n    let cases = [];\n    for (let i = 1; i < results[1].length; i++) {\n      let element;\n      element = Math.ceil((100000 * results[1][i])/328239523);\n      cases.push(element);\n    }\n    console.log(`cases per 100,000 people: `, cases);\n    let deaths = [];\n    for (let i = 1; i < results[2].length; i++) {\n      let element;\n      element = Math.ceil((1000 * results[1][i])/328239523);\n      deaths.push(element);\n    }\n    console.log(`deaths per 100,000 people: `, deaths);\n    let perCapitaResults = [results[0], cases, deaths];\n    console.log(`perCapitaResults: `, perCapitaResults);\n    return perCapitaResults;\n  },\n\n  handleUSNewPerCapita(csvString) {\n    let results = this.handleUSTotalPerCapita(cs)\n  },\n\n  handleUSNewCases(csvString) {\n    let results = this.handleUSCSVResult(csvString);\n    let newCases = [];\n    for (let i = 1; i < results[1].length; i++) {\n      let element;\n      element = results[1][i] - results[1][i-1];\n      newCases.push(element);\n    }\n    console.log(`new cases: `, newCases);\n    let newDeaths = [];\n    for (let i = 1; i < results[2].length; i++) {\n      let element;\n      element = results[2][i] - results[2][i-1];\n      newDeaths.push(element);\n    }\n    console.log(`new deaths: `, newDeaths);\n    let newResults = [results[0], newCases, newDeaths]\n    console.log(`newResults: `, newResults);\n    return newResults;\n  },\n\n  handleStatesCSVResult(csvString, fips) {\n    // Split csv to rows array\n    var rows = csvString.split('\\n');\n    let newRows = rows.map(element => element.split(\",\"));\n    let selectedState = [];\n    for (let i = 1; i < newRows.length; i++) {\n      // eslint-disable-next-line\n      if (newRows[i][2] == fips) {\n        selectedState.push(newRows[i]);\n      }\n    }\n    let dateArr = selectedState.map(element => element[0]);\n    let casesArr = selectedState.map(element => element[3]);\n    let deathsArr = selectedState.map(element => element[4]);\n    let stateName = selectedState[1][1];\n    selectedState = [dateArr, casesArr, deathsArr, stateName];\n    return selectedState;\n  },\n\n  handleStatesNewCases(csvString, fips) {\n    let selectedState = this.handleStatesCSVResult(csvString, fips);\n    //create array of new cases found each day\n    let newCases = [];\n    for (let i = 1; i < selectedState[1].length; i++) {\n      let element;\n      element = selectedState[1][i] - selectedState[1][i-1];\n      newCases.push(element);\n    }\n    console.log(`new cases: `, newCases);\n    let newDeaths = [];\n    for (let i = 1; i < selectedState[2].length; i++) {\n      let element;\n      element = selectedState[2][i] - selectedState[2][i-1];\n      newDeaths.push(element);\n    }\n    console.log(`new deaths: `, newDeaths);\n    let newResults = [selectedState[0], newCases, newDeaths, selectedState[3]]\n    console.log(`newResults: `, newResults);\n    return newResults;\n  }\n}\n\n\n\n\n/*\nlet Alabama=[];\nlet Alaska=[];\nlet Arizona=[];\nlet Arkansas=[];\nlet California=[];\nlet Colorado=[];\nlet Connecticut=[];\nlet Delaware=[];\nlet DC=[];\nlet Florida=[];\nlet Georgia=[];\nlet Hawaii=[];\nlet Idaho=[];\nlet Kansas=[];\nlet Kentucky=[];\nlet Louisiana=[];\nlet Maine=[];\nlet Maryland=[];\nlet Massachusetts=[];\nlet Michigan=[];\nlet Minnesota=[];\nlet Mississippi=[];\nlet Missouri=[];\nlet Montana=[];\nlet Nebraska=[];\nlet Nevada=[];\nlet NewHampshire=[];\nlet NewJersey=[];\nlet NewMexico=[];\nlet NewYork=[];\nlet NorthCarolina=[];\nlet NorthDakota=[];\nlet Ohio=[];\nlet Oklahoma=[];\nlet Oregon=[];\nlet Pennsylvania=[];\nlet RhodeIsland=[];\nlet SouthCarolina=[];\nlet SouthDakota=[];\nlet Tennessee=[];\nlet Texas=[];\nlet Utah=[];\nlet Vermont=[];\nlet Virginia=[];\nlet Washington=[];\nlet WestVirginia=[];\nlet Wisconsin=[];\nlet Wyoming=[];\nlet AmericanSamoa=[];\nlet Micronesia=[];\nlet Guam=[];\nlet Mariana=[];\nlet Palau=[];\nlet PuertoRico=[];\nlet VirginIslands=[];\n*/\n"]},"metadata":{},"sourceType":"module"}